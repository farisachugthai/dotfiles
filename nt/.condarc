# Condarc
# Maintainer: Faris Chugthai

# For more information about this file see:
# https://conda.io/docs/user-guide/configuration/use-condarc.html
# enable_private_envs: true

# default_python: 3.8

# Don't know where this option is listed in conda config --describe.
# Shit I mean it probably isn't
allow_conda_downgrades: true

# Damn there are so many options shown by conda config --show that aren't here
use_index_cache: true

error_upload_url: ''

######################################################
##              Channel Configuration               ##
######################################################

# channels (sequence: str)
#   aliases: channel
#   env var string delimiter: ','
#   The list of conda channels to include for relevant operations.
#   Bokeh at the top because start more specific and keep going to more general
#   sites with more packages until we max out at forge.
#   Definitely worth noting that bokeh has its own channel though.
#
channels:

  - conda-forge
  - defaults
  - bokeh
  - conda-canary
  - intel
  - pytorch
  - anaconda
  - bioconda
  - mkl
default_channels:
  - https://repo.anaconda.com/pkgs/main
  - https://repo.anaconda.com/pkgs/free
  - https://repo.anaconda.com/pkgs/msys2

  # Frustratingly these don't work
  # - https://repo.anaconda.com/pkgs/r
  # - https://repo.anaconda.com/pkgs/free
  # - https://repo.anaconda.com/pkgs/archive


    # This works but it always raises errors
    # - https://repo.anaconda.com/pkgs/pro
# override_channels_enabled (bool)
#   Permit use of the --overide-channels command-line flag.
#
# override_channels_enabled: true

# whitelist_channels (sequence: str)
#   env var string delimiter: ','
#   The exclusive list of channels allowed to be used on the system. Use
#   of any other channels will result in an error. If conda-build channels
#   are to be allowed, along with the --use-local command line flag, be
#   sure to include the 'local' channel in the list. If the list is empty
#   or left undefined, no channel exclusions will be enforced.
#
# whitelist_channels: []

# custom_channels (map: str)
#   A map of key-value pairs where the key is a channel name and the value
#   is a channel location. Channels defined here override the default
#   'channel_alias' value. The channel name (key) is not included in the
#   channel location (value).  For example, to override the location of
#   the 'conda-forge' channel where the url to repodata is
#   https://anaconda-repo.dev/packages/conda-forge/linux-64/repodata.json,
#   add an entry 'conda-forge: https://anaconda-repo.dev/packages'.
#
# custom_channels:
#   - pro: https://repo.anaconda.com
#   - anaconda: https://anaconda.org/anaconda

# custom_multichannels (map: list)
#   A multichannel is a metachannel composed of multiple channels. The two
#   reserved multichannels are 'defaults' and 'local'. The 'defaults'
#   multichannel is customized using the 'default_channels' parameter. The
#   'local' multichannel is a list of file:// channel locations where
#   conda-build stashes successfully-built packages.  Other multichannels
#   can be defined with custom_multichannels, where the key is the
#   multichannel name and the value is a list of channel names and/or
#   channel urls.
#
# custom_multichannels: {}

# migrated_channel_aliases (sequence: str)
#   env var string delimiter: ','
#   A list of previously-used channel_alias values. Useful when switching
#   between different Anaconda Repository instances.
#
# migrated_channel_aliases: []

# migrated_custom_channels (map: str)
#   A map of key-value pairs where the key is a channel name and the value
#   is the previous location of the channel.
#
# migrated_custom_channels: {}

# add_anaconda_token (bool)
#   aliases: add_binstar_token
#   In conjunction with the anaconda command-line client (installed with
#   `conda install anaconda-client`), and following logging into an
#   Anaconda Server API site using `anaconda login`, automatically apply a
#   matching private token to enable access to private packages and
#   channels.
#
# add_anaconda_token: true

# allow_non_channel_urls (bool)
#   Warn, but do not fail, when conda detects a channel url is not a valid
#   channel.
#
allow_non_channel_urls: true

# restore_free_channel (bool)
#   Add the "free" channel back into defaults, behind
#   "main" in priority. The "free" channel was removed
#   from the collection of default channels in conda 4.7.0.
#
restore_free_channel: true

# repodata_fns (sequence: str)
#   env var string delimiter: ','
#   Specify filenames for repodata fetching. The default is
#   ('current_repodata.json', 'repodata.json'), which tries a subset of
#   the full index containing only the latest version for each package,
#   then falls back to repodata.json.  You may want to specify something
#   else to use an alternate index that has been reduced somehow.
#
#
# repodata_fns:
#   - current_repodata.json
#   - repodata.json

# use_only_tar_bz2 (NoneType, bool)
#   A boolean indicating that only .tar.bz2 conda packages should be
#   downloaded. This is forced to True if conda-build is installed and
#   older than 3.18.3, because older versions of conda break when conda
#   feeds it the new file format.
#
# use_only_tar_bz2:

# repodata_threads (int)
#   Threads to use when downloading and reading repodata.  When not set,
#   defaults to None, which uses the default ThreadPoolExecutor behavior.
#
# repodata_threads: 0

# as reference
# channels:
#   - conda-forge
#   - defaults
#   - bokeh
#   - conda-canary
#   - intel
#   - pytorch
#   - anaconda
#   - bioconda
# client_ssl_cert: None
# client_ssl_cert_key: None
# clobber: True
# conda_build: {}
# create_default_packages: []
# croot: C:\tools\vs\2019\Community\Common7\IDE\Extensions\Microsoft\Python\Miniconda\Miniconda3-x64\conda-bld
# custom_channels:
#   pkgs/main: https://repo.anaconda.com
#   pkgs/free: https://repo.anaconda.com
#   pkgs/pro: https://repo.anaconda.com
#   pkgs/msys2: https://repo.anaconda.com
#   C:/tools/vs/2019/Community/Common7/IDE/Extensions/Microsoft/Python/Miniconda/Miniconda3-x64/conda-bld: file://
# custom_multichannels:
#   defaults:
#     - https://repo.anaconda.com/pkgs/main
#     - https://repo.anaconda.com/pkgs/free
#     - https://repo.anaconda.com/pkgs/free
#     - https://repo.anaconda.com/pkgs/pro
#     - https://repo.anaconda.com/pkgs/msys2
#   local:
#     - file:///C:/tools/vs/2019/Community/Common7/IDE/Extensions/Microsoft/Python/Miniconda/Miniconda3-x64/conda-bld
# debug: False

######################################################
##            Basic Conda Configuration             ##
######################################################

# envs_dirs (sequence: str)
#   aliases: envs_path
#   env var string delimiter: ';'
#   The list of directories to search for named environments. When
#   creating a new named environment, the environment will be placed in
#   the first writable location.
# envs_dirs:

  # - C:\tools\vs\2019\Community\Common7\IDE\Extensions\Microsoft\Python\Miniconda\Miniconda3-x64\envs

#   - C:\tools\miniconda3\envs
#
# pkgs_dirs (sequence: str)
#   env var string delimiter: ','
#   The list of directories where locally-available packages are linked
#   from at install time. Packages not locally available are downloaded
#   and extracted into the first writable directory.
#
# Oct 18, 2019: Had to update because there were 3 listed for no reason
# Oooo actually can we add one to the base of big envs?
# pkgs_dirs:

  # - C:\tools\vs\2019\Community\Common7\IDE\Extensions\Microsoft\Python\Miniconda\Miniconda3-x64\pkgs


#   - C:\tools\miniconda3\pkgs
  # - C:\tools\miniconda3\envs\working\pkgs
  # - C:\tools\miniconda3\envs\anaconda\pkgs

# default_threads (int)
#   Threads to use by default for parallel operations.  Default is None,
#   which allows operations to choose themselves.
#   For more specific control, see the other *_threads parameters:
#   * repodata_threads - for fetching/loading repodata
#   * verify_threads - for verifying package contents in transactions
#   * execute_threads - for carrying out the unlinking and linking steps
# default_threads: 0


######################################################
##              Network Configuration               ##
######################################################

# client_ssl_cert (NoneType, str)
#   aliases: client_cert
#   A path to a single file containing a private key and certificate (e.g.
#   .pem file). Alternately, use client_ssl_cert_key in conjuction with
#   client_ssl_cert for individual files.
#
# client_ssl_cert:

# client_ssl_cert_key (NoneType, str)
#   aliases: client_cert_key
#   Used in conjunction with client_ssl_cert for a matching key file.
#
# client_ssl_cert_key:

# local_repodata_ttl (bool, int)
#   For a value of False or 0, always fetch remote repodata (HTTP 304
#   responses respected). For a value of True or 1, respect the HTTP
#   Cache-Control max-age header. Any other positive integer values is the
#   number of seconds to locally cache repodata before checking the remote
#   server for an update.
#
# local_repodata_ttl: 1

# offline (bool)
#   Restrict conda to cached download content and file:// based urls.
#
# offline: false

# proxy_servers (map: NoneType, str)
#   A mapping to enable proxy settings. Keys can be either (1) a
#   scheme://hostname form, which will match any request to the given
#   scheme and exact hostname, or (2) just a scheme, which will match
#   requests to that scheme. Values are are the actual proxy server, and
#   are of the form 'scheme://[user:password@]host[:port]'. The optional
#   'user:password' inclusion enables HTTP Basic Auth with your proxy.
#
# proxy_servers: {}

# remote_connect_timeout_secs (float)
#   The number seconds conda will wait for your client to establish a
#   connection to a remote url resource.
#
# remote_connect_timeout_secs: 9.15

# remote_max_retries (int)
#   The maximum number of retries each HTTP connection should attempt.
#
# remote_max_retries: 3

# remote_read_timeout_secs (float)
#   Once conda has connected to a remote resource and sent an HTTP
#   request, the read timeout is the number of seconds conda will wait for
#   the server to send a response.
#
# remote_read_timeout_secs: 60.0

# ssl_verify (bool, str)
#   aliases: verify_ssl
#   Conda verifies SSL certificates for HTTPS requests, just like a web
#   browser. By default, SSL verification is enabled, and conda operations
#   will fail if a required url's certificate cannot be verified. Setting
#   ssl_verify to False disables certification verification. The value for
#   ssl_verify can also be (1) a path to a CA bundle file, or (2) a path
#   to a directory containing certificates of trusted CA.
#
# ssl_verify: true


######################################################
#                Solver Configuration                #
######################################################

# aggressive_update_packages (sequence: str)
#   env var string delimiter: ','
#   A list of packages that, if installed, are always updated to the
#   latest possible version.
#
aggressive_update_packages:
  - ca-certificates
  - certifi
  - openssl

# auto_update_conda (bool)
#   aliases: self_update
#   Automatically update conda when a newer or higher priority version is
#   detected.
auto_update_conda: false

# channel_priority (ChannelPriority)
#   Accepts values of 'strict', 'flexible', and 'disabled'. The default
#   value is 'flexible'. With strict channel priority, packages in lower
#   priority channels are not considered if a package with the same name
#   appears in a higher priority channel. With flexible channel priority,
#   the solver may reach into lower priority channels to fulfill
#   dependencies, rather than raising an unsatisfiable error. With channel
#   priority disabled, package version takes precedence, and the
#   configured priority of channels is used only to break ties. In
#   previous versions of conda, this parameter was configured as either
#   True or False. True is now an alias to 'flexible'.
#
# default:
# channel_priority: disabled
channel_priority: strict

# create_default_packages (sequence: str)
#   env var string delimiter: ','
#   Packages that are by default added to a newly created environments.
#
#
# create_default_packages: []

# disallowed_packages (sequence: str)
#   aliases: disallow
#   env var string delimiter: '&'
#   Package specifications to disallow installing. The default is to allow
#   all packages.
#
# disallowed_packages: []

# force_reinstall (bool)
#   Ensure that any user-requested package for the current operation is
#   uninstalled and reinstalled, even if that package already exists in
#   the environment.
#
# force_reinstall: false

# pinned_packages (sequence: str)
#   env var string delimiter: '&'
#   A list of package specs to pin for every environment resolution. This
#   parameter is in BETA, and its behavior may change in a future release.
#   pinned_packages: []
# was the default
pinned_packages:
  - conda

# pip_interop_enabled (bool)
#   Allow the conda solver to interact with non-conda-installed python
#   packages.
pip_interop_enabled: false

# prune (bool)
#   Remove packages that have previously been brought into an environment
#   to satisfy dependencies of user-requested packages, but are no longer
#   needed.
# prune: true

# track_features (sequence: str)
#   env var string delimiter: ','
#   A list of features that are tracked by default. An entry here is
#   similar to adding an entry to the create_default_packages list.
#
# track_features: []

# TODO: what is this option?
# Aug 20, 2019: Inexplicabily, it's been disabled in conda 4.7.11 so...
# channel_flexibility: disabled

# From: https://conda.io/docs/user-guide/configuration/sample-condarc.html
# Non-url channels will be interpreted as Anaconda.org usernames
# (this can be changed by modifying the channel_alias key; see below).

######################################################
#   Package Linking and Install-time Configuration   #
######################################################

# allow_softlinks (bool)
#   When allow_softlinks is True, conda uses hard-links when possible, and
#   soft-links (symlinks) when hard-links are not possible, such as when
#   installing on a different filesystem than the one that the package
#   cache is on. When allow_softlinks is False, conda still uses hard-
#   links when possible, but when it is not possible, conda copies files.
#   Individual packages can override this setting, specifying that certain
#   files should never be soft-linked (see the no_link option in the build
#   recipe documentation).
#
# !!!! WTH
allow_softlinks: true

# always_copy (bool)
#   aliases: copy
#   Register a preference that files be copied into a prefix during
#   install rather than hard-linked.

# always_copy: false

# always_softlink (bool)
#   aliases: softlink
#   Register a preference that files be soft-linked (symlinked) into a
#   prefix during install rather than hard-linked. The link source is the
#   'pkgs_dir' package cache from where the package is being linked.
#   WARNING: Using this option can result in corruption of long-lived
#   conda environments. Package caches are *caches*, which means there is
#   some churn and invalidation. With this option, the contents of
#   environments can be switched out (or erased) via operations on other
#   environments.
#
# always_softlink: false

# path_conflict (PathConflict)
#   The method by which conda handle's conflicting/overlapping paths
#   during a create, install, or update operation. The value must be one
#   of 'clobber', 'warn', or 'prevent'. The '--clobber' command-line flag
#   or clobber configuration parameter overrides path_conflict set to
#   'prevent'.
# path_conflict: warn
# Oct 11, 2019: new default is clobber

# rollback_enabled (bool)
#   Should any error occur during an unlink/link transaction, revert any
#   disk mutations made to that point in the transaction.
#
# rollback_enabled: true

# safety_checks (SafetyChecks)
#   Enforce available safety guarantees during package installation. The
#   value must be one of 'enabled', 'warn', or 'disabled'.
safety_checks: enabled

# extra_safety_checks (bool)
#   Spend extra time validating package contents.  Currently, runs sha256
#   verification on every file within each package during installation.
#
extra_safety_checks: true

# shortcuts (bool)
#   Allow packages to create OS-specific shortcuts (e.g. in the Windows
#   Start Menu) at install time.
#
shortcuts: true

# non_admin_enabled (bool)
#   Allows completion of conda's create, install, update, and remove
#   operations, for non-privileged (non-root or non-administrator) users.
#
#
# non_admin_enabled: true

# separate_format_cache (bool)
#   Treat .tar.bz2 files as different from .conda packages when filenames
#   are otherwise similar. This defaults to False, so that your package
#   cache doesn't churn when rolling out the new package format. If you'd
#   rather not assume that a .tar.bz2 and .conda from the same place
#   represent the same content, set this to True.
#
# separate_format_cache: false

# verify_threads (int)
#   Threads to use when performing the transaction verification step.
#   When not set, defaults to 1.
#
# verify_threads: 0

# execute_threads (int)
#   Threads to use when performing the unlink/link transaction.  When not
#   set, defaults to 1.  This step is pretty strongly I/O limited, and you
#   may not see much benefit here.
#
# execute_threads: 0


######################################################
##            Conda-build Configuration             ##
######################################################

# bld_path (str)
#   The location where conda-build will put built packages. Same as
#   'croot', but 'croot' takes precedence when both are defined. Also used
#   in construction of the 'local' multichannel.
#
# bld_path: ''

# croot (str)
#   The location where conda-build will put built packages. Same as
#   'bld_path', but 'croot' takes precedence when both are defined. Also
#   used in construction of the 'local' multichannel.
#
# croot: ''

# anaconda_upload (NoneType, bool)
#   aliases: binstar_upload
#   Automatically upload packages built with conda build to anaconda.org.
#
# anaconda_upload:

# conda_build (map: str)
#   aliases: conda-build
#   General configuration parameters for conda-build.
#
# conda_build: {}

######################################################
##  Output, Prompt, and Flow Control Configuration  ##
######################################################

# always_yes (NoneType, bool)
#   aliases: yes
#   Automatically choose the 'yes' option whenever asked to proceed with a
#   conda operation, such as when running `conda install`.
#
# always_yes:

# auto_activate_base (bool)
#   Automatically activate the base environment during shell
#   initialization.
#
# Automatically activate the base environment during the initialization.
# auto_activate_base: true

# changeps1 (bool)
#   When using activate, change the command prompt ($PS1) to include the
#   activated environment.
#
# changeps1: true

# env_prompt (str)
#   Template for prompt modification based on the active environment.
#   Currently supported template variables are '{prefix}', '{name}', and
#   '{default_env}'. '{prefix}' is the absolute path to the active
#   environment. '{name}' is the basename of the active environment
#   prefix. '{default_env}' holds the value of '{name}' if the active
#   environment is a conda named environment ('-n' flag), or otherwise
#   holds the value of '{prefix}'. Templating uses python's str.format()
#   method.
#
# env_prompt: '({default_env}) '
#
env_prompt: '({name}) '

# json (bool)
#   Ensure all output written to stdout is structured json.
#
# json: false

# notify_outdated_conda (bool)
#   Notify if a newer version of conda is detected during a create,
#   install, update, or remove operation.
#
notify_outdated_conda: false

# quiet (bool)
#   Disable progress bar display and other output.
#
# quiet: false

# report_errors (NoneType, bool)
#   Opt in, or opt out, of automatic error reporting to core maintainers.
#   Error reports are anonymous, with only the error stack trace and
#   information given by `conda info` being sent.
#
report_errors: false


# show_channel_urls (NoneType, bool)
#   Show channel URLs when displaying what is going to be downloaded.
#
show_channel_urls: true

ssl_verify: true

# verbosity (int)
#   aliases: verbose
#   Sets output log level. 0 is warn. 1 is info. 2 is debug. 3 is trace.
# verbosity: 0

# unsatisfiable_hints (bool)
#   A boolean to determine if conda should find conflicting packages in
#   the case of a failed install.
#
# unsatisfiable_hints: true

# Vim: set ft=yaml:
