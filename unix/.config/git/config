# Global Git Config

[user]
    email = farischugthai@gmail.com
    name = farisachugthai

[add]
    ignoreErrors = True
    verbose = True
    renormalize = True

[apply]
    ignoreWhitespace = change
    whitespace = fix

[alias]
        a=add -v
       aa=add --all
       ai=add --interactive
    amend=commit --amend
       ar=add --renormalize -v
       ap=add --patch
       ar=add --renormalize
       au=add --update
        b=branch -va
       bd=branch -d
       bD=branch -D
       bl=blame
       br=branch
      brd=branch -rd
      brD=branch -rD
       ci=commit
      cia=commit --amend
     ciad=commit --amend --date=
      cid=commit --date=
       cl=clone
      cls=clone --depth 1
       co=checkout
      cob=checkout -b
    # fucking gotta be kidding me
    commi=commit
        d=diff
       ds=diff --staged
      ds2=diff --stat --staged
       dt=difftool
        f=fetch --all
       fe=fetch
        g=grep
        h=help
     hist=log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
        i=init
        l=log
     last=log --HEAD
    # from man git-alias. added '-msg' to make distinct from other last
    last-msg = cat-file commit HEAD
	lg = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    # What the hell is error 8? This command keeps dying
    lo = log --graph --decorate --abbrev-commit --branches --all --pretty=format:lg --oneline
    ls = ls-tree -rl --abbrev master
    m = merge --no-ff
    ma = merge --abort
    mc = merge --continue
    mm = merge --no-ff master
    mt = mergetool
    p = pull --all --verbose
    po = pull --all --verbose origin
    pom = pull --all --verbose -- origin master
    psh = push  # goddamn
    pu = push
    pul = pull	# gotta imagine how annoying these are
    pus = push
    r = remote -v
    rank = shortlog -sn --no-merges
    re = rebase
    rea = rebase --abort
    rec = rebase --continue
    rei = rebase -i
    rel = rev-parse --show-prefix
    remot = remote
    root = rev-parse --show-toplevel
    s = status -s
    sb = status -sb
    sh = stash
    sha = stash apply
    shc = stash clear
    shd = stash drop
    shl = stash list
    shp = stash pop
    shs = stash show
    shsp = stash show --patch
    st = diff --stat
    staged = diff --cached
# Isn't that shit the worst?
    statu = status
    sw = switch --progress
    t = tag --list
    unstage = reset HEAD -- $*
    unstaged = diff
    url = ls-remote --get-url
    whatis = show -s --pretty=´tformat:%h (%s, %ad)´ --date=short
    whois = !sh -c ´git log -i -1 --pretty="format:%an <%ae>"

[blame]
    coloring = highlightRecent

[branch]
    autosetupmerge = True

[checkout]
    # Jun 01, 2019: Automatically follow remote branches withe same name
    defaultRemote = origin
    # the default is to overwrite ignored files. if you need to do so then
    # override on the cmd line but otherwise encourage more safe behavior
    no-overwrite-ignore = true

[clean]
    requireForce = False

[cola]
    spellcheck = True
    tabwidth = 4
    expandtab = True
    boldheaders = True

[color]
    # always and not auto because this setting still only affects porcelain commands
    ; ui = always
    ; LIKE DIFFS IN FUGITIVE WHOA IS THIS IS A BAD IDEA
    ; ui = always

[column]
    clean = never  # git shows files it's gonna wipe with git clean in columns and i hate it

[commit]
    verbose = True

[core]
    autocrlf = False
	compression = 5
    editor = nvim-qt
    editor = nvim
    eol = lf
    excludesfile = "$HOME/.config/git/ignore"
    fscache = True

    # If true, Git will avoid using lstat() calls to detect if files have
    # changed by setting the "assume-unchanged" bit for those tracked files
    # which it has updated identically in both the index and working tree.

    # When files are modified outside of Git, the user will need to stage the
    # modified files explicitly (e.g. see Examples section in
    # git-update-index(1)). Git will not normally detect changes to those files.

    # This is useful on systems where lstat() calls are very slow, such as
    # CIFS/Microsoft Windows.

    # False by default.
    ignorestat = True
    # paging = False
    # uhhhhh so this works??
    # pager = nvim
    # oh btw dont list things multiple times.
    # i tried doing that to indicate fallbacks but this file doesnt work like that
    pager = bat
    protocol = ssh
    symlink = True
    sshCommand = ssh
    untrackedCache = True

[credential]
    protocol = ssh
    modalPrompt = True
    store = approve
    username = farisachugthai

[credential "https://www.github.com"]
    username = farisachugthai

[credential "https://source.developers.google.com"]
    helper = gcloud.cmd

# Man git-difftool: Line 85
# If difftool settings havent been set, fall back to mergetool
[diff]
    algorithm = patience
    autoRefreshIndex
    context = 0
    dirstat = changes,files,10,cumulative

       ; --color-moved[=<mode>]
       ;     Moved lines of code are colored differently. The <mode> defaults to no if the option is not given and to zebra if the option with no mode is given.
       ;     The mode must be one of:
    color-moved = dimmed-zebra

    # Do not ignore whitespace when performing move detection. This can be used to override configuration settings. It is the same as --color-moved-ws=no.
    color-moved-ws=no
    find-renames = true
    indentHeuristic = true
    interHunkContext = 0
    mnemonicPrefix = true

    # detect copied files as well as renames. affects merge and status.renames
    renames = copy
    strategy-option = resolve
    # Idk if this is a new option but man am I glad to have stumbled upon it
    suppressBlankEmpty = true
    tool = vimdiff
    word-diff = color
    wsErrorHighlight = old,new,context	 # same as all

[difftool]
    cmd = nvim -d $LOCAL $REMOTE $BASE $MERGED -c 'wincmd w' -c'wincmd J'
    prompt = false

[feature]
    manyFiles = True
    experimental = True

[fetch]
    negotiationAlgorithm = skipping
    prune = true
    recurseSubmodules = true
    parallel = 0

    # Specifies the maximal number of fetch operations to be run in parallel
    # at a time (submodules, or remotes when the --multiple option of
    # git-fetch[1] is in effect).
    # A value of 0 will give some reasonable default. If unset, it defaults to 1.

# [filter]
    # lfs.clean=git-lfs clean -- %f
    # lfs.process=git-lfs filter-process
    # lfs.required=true
    # lfs.smudge=git-lfs smudge -- %f

[gc]
    auto = 3000   # the default is 6700 but that sounds really high

[grep]
    fallbackToNoIndex = True
    lineNumber = True
    extendedRegexp = True

[gui]
    cmd = nvim -d $LOCAL $REMOTE
	diffcontext = 1
    editor = nvim-qt.exe
    editor = nvim
    encoding = utf-8
	fontui = -family \"FuraMono Nerd Font Mono\" -size 12 -weight normal -slant roman -underline 0 -overstrike 0
	fontdiff = -family \"FuraMono Nerd Font Mono\" -size 12 -weight normal -slant roman -underline 0 -overstrike 0
	matchtrackingbranch = true
    newbranchtemplate = nt
	pruneduringfetch = true
    tabsize = 4
    trustexitcode = false
    warndetachedcommit = true

[grep]
    lineNumber = true
    extendedRegexp = true

[help]
    autocorrect = 5
    format = man
    format = web

[index]
    version = 4

[html]
    sslbackend=openssl

[log]
    abbrevCommit = true
    # DUDE! Don't turn showSignature on
    showSignature = false
    # old: format = '%h %ad | %s%d [%an]'
    # NOTE: mirrored at pretty.format.lo [el oh]. So you can do git log --pretty=lo and get the same thing
    format = "format:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset"
    # cross your finger that neovim just starts auto highlighting
    ; graphColors=#e3a84e,#ea6962,#7daea3


[man]
    viewer = nvim

# lets see if this works
[man "nvim"]
    cmd ="nvim -c':tabe' -c':Man ' "

[merge]
    autoStash = True
    branchdesc = True
    conflictstyle = diff3
    defaultToUpstream = True
    diffstat = true

    ; merge.directoryRenames
    ;     Whether Git detects directory renames, affecting what happens at
    ;     merge time to new files added to a directory on one side of history
    ;     when that directory was renamed on the other side of history. If
    ;     merge.directoryRenames is set to "false", directory rename
    ;     detection is disabled, meaning that such new files will be left
    ;     behind in the old directory. If set to "true", directory rename
    ;     detection is enabled, meaning that such new files will be moved
    ;     into the new directory. If set to "conflict", a conflict will be
    ;     reported for such paths. If merge.renames is false,
    ;     merge.directoryRenames is ignored and treated as false. Defaults to
    ;     "conflict".

    directoryRenames = True
    # ff = true
    log = 3
    mergestyle = diff3
    prompt = false
    renormalize
    renames = true
    renormalize = true
    strategy = recursive
    strategy-option = patience
    # strategy-option--diff-algorithm = --set
    summary = true
    tool = vimdiff

# this is from justinmk
# https://github.com/neovim/neovim/issues/2377
[mergetool]
    cmd = nvim -d $LOCAL $REMOTE $MERGED -c 'wincmd w' -c 'wincmd J'
    # if it's not immediately clear what's going on, read up from this link:
    # http://blog.wuwon.id.au/2010/09/painless-merge-conflict-resolution-in.html
    # from this link we see that BASE is the commit that the file diverged at.
    # local and remote are the 2 paths we're trying to merge, and we can
    # determine which changes are necessary and what needs to be kept by
    # looking at those 4 buffers as a timeline
    prompt = False


[pretty]
    lo="format:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset"
; pretty.<name>
;     Alias for a --pretty= format string, as specified in git-log(1).
;     Any aliases defined here can be used just as the built-in pretty
;     formats could. For example, running git config pretty.changelog
;     "format:* %H %s" would cause the invocation git log
;     --pretty=changelog to be equivalent to running git log
;     "--pretty=format:* %H %s". Note that an alias with the same name as
;     a built-in format will be silently ignored.
# well thats cool as shit

[protocol]
    ssh = True

[pull]
    progress = True
    rebase = merges
    renames = True
    renormalize = True
    stat = True
    strategy = recursive
    strategy-option = patience

[push]
    stat
    recurseSubmodules = check
    followTags = True
       ; push.default
       ;     Defines the action git push should take if no refspec is explicitly
       ;     given. Different values are well-suited for specific workflows; for
       ;     instance, in a purely central workflow (i.e. the fetch source is
       ;     equal to the push destination), upstream is probably what you want.
       ;     Possible values are:

       ;     ...

       ;     ·	 current - push the current branch to update a branch with the
       ;	 same name on the receiving end. Works in both central and
       ;	 non-central workflows.
    default = upstream

[rebase]
    # When the commit log message begins with "squash! …" (or "fixup! …"), and
    # there is a commit whose title begins with the same …, automatically
    # modify the todo list of rebase -i so that the commit marked for
    # squashing comes right after the commit to be modified, and change the
    # action of the moved commit from pick to squash (or fixup).
    # Ignores subsequent "fixup! " or "squash! " after the first, in case you
    # referred to an earlier fixup/squash with git commit --fixup/--squash.
    # This option is only valid when the --interactive option is used.
    autoSquash = True
    autoStash = True
    missingCommitsCheck = "warn"
    stat = True
    strategy = recursive
    strategy-option = patience

[sequence]
    editor = nvim

[status]
    branch = True
    displayCommentPrefix = True  # git comments out its own output for easier copy pasting!
    renames = copy
    showStash = True
    showUntrackedFiles = all
    submoduleSummary = True

[submodule]
    alternateErrorStrategy = info

[tar]
    umask = 0002

[url "git://github.com"]
    insteadOf = g:
    name = farisachugthai

[url "git@gist.github.com"]
    insteadOf = "gist:"
    pushInsteadOf = "gist:"

; Vim: set et sts=4 ts=4 sw=4 ft=gitconfig:
