# Condarc
# Maintainer: Faris Chugthai

# Nov 03, 2018
# Pinning conda because the update is breaking my setup

# pinned_packages (sequence: str)
#   string delimiter: '&'
#   A list of package specs to pin for every environment resolution. This
#   parameter is in BETA, and its behavior may change in a future release.
#
# pinned_packages: [conda]
allow_conda_downgrades: false

# add_pip_as_python_dependency (bool)
#   Add pip, wheel and setuptools as dependencies of python. This ensures
#   pip, wheel and setuptools will always be installed any time python is
#   installed.
#
add_pip_as_python_dependency: true

aggressive_update_packages:
  - ca-certificates
  - certifi
  - openssl
  - ipython
  # 11/02/18 - Conda 4.5.11b took conda off here because conda 4.6 was crashing

auto_update_conda: true

channels:
  - defaults
  - main
  - conda-forge
  - conda-canary
  - free
channel_priority: false

# From: https://conda.io/docs/user-guide/configuration/sample-condarc.html
# Non-url channels will be interpreted as Anaconda.org usernames
# (this can be changed by modifying the channel_alias key; see below).

# Show channel URLs when displaying what is going to be downloaded
# and in 'conda list'. The default is False.
show_channel_urls: true

ssl_verify: true

verbosity: 0

# And all of this is the output of `conda config --describe` appended here

# Dude whatttttt thw new condarc file looks so much better than mine! Check this out
# ######################################################
# ##            Basic Conda Configuration             ##
# ######################################################

# env_prompt (str)
#   Template for prompt modification based on the active environment.
#   Currently supported template variables are '{prefix}', '{name}', and
#   '{default_env}'. '{prefix}' is the absolute path to the active
#   environment. '{name}' is the basename of the active environment
#   prefix. '{default_env}' holds the value of '{name}' if the active
#   environment is a conda named environment ('-n' flag), or otherwise
#   holds the value of '{prefix}'. Templating uses python's str.format()
#   method.
#
env_prompt: '({default_env}) '

# envs_dirs (sequence: str)
#   aliases: envs_path
#   env var string delimiter: ':'
#   The list of directories to search for named environments. When
#   creating a new named environment, the environment will be placed in
#   the first writable location.
#
# envs_dirs: []

# For more information about this file see:
# https://conda.io/docs/user-guide/configuration/use-condarc.html
# add_anaconda_token (bool)
#   aliases: add_binstar_token
#   In conjunction with the anaconda command-line client (installed with
#   `conda install anaconda-client`), and following logging into an
#   Anaconda Server API site using `anaconda login`, automatically apply a
#   matching private token to enable access to private packages and
#   channels.
#
# add_anaconda_token: true

# aggressive_update_packages (sequence: str)
#   string delimiter: ','
#   A list of packages that, if installed, are always updated to the
#   latest possible version.

# allow_non_channel_urls (bool)
#   Warn, but do not fail, when conda detects a channel url is not a valid
#   channel.
#
# allow_non_channel_urls: false


# allow_softlinks (bool)
#   When allow_softlinks is True, conda uses hard-links when possible, and
#   soft-links (symlinks) when hard-links are not possible, such as when
#   installing on a different filesystem than the one that the package
#   cache is on. When allow_softlinks is False, conda still uses hard-
#   links when possible, but when it is not possible, conda copies files.
#   Individual packages can override this setting, specifying that certain
#   files should never be soft-linked (see the no_link option in the build
#   recipe documentation).
#
# allow_softlinks: false


# always_copy (bool)
#   aliases: copy
#   Register a preference that files be copied into a prefix during
#   install rather than hard-linked.
#
# always_copy: false


# always_softlink (bool)
#   aliases: softlink
#   Register a preference that files be soft-linked (symlinked) into a
#   prefix during install rather than hard-linked. The link source is the
#   'pkgs_dir' package cache from where the package is being linked.
#   WARNING: Using this option can result in corruption of long-lived
#   conda environments. Package caches are *caches*, which means there is
#   some churn and invalidation. With this option, the contents of
#   environments can be switched out (or erased) via operations on other
#   environments.
#
# always_softlink: false


# always_yes (NoneType, bool)
#   aliases: yes
#   Automatically choose the 'yes' option whenever asked to proceed with a
#   conda operation, such as when running `conda install`.
#
# always_yes:


# anaconda_upload (NoneType, bool)
#   aliases: binstar_upload
#   Automatically upload packages built with conda build to anaconda.org.
#
# anaconda_upload:

# changeps1 (bool)
#   When using activate, change the command prompt ($PS1) to include the
#   activated environment.
# isn't this the default?
changeps1: true

# channel_alias (str)
#   The prepended url location to associate with channel names.
#
# channel_alias: https://conda.anaconda.org

# client_ssl_cert (NoneType, str)
#   aliases: client_cert
#   A path to a single file containing a private key and certificate (e.g.
#   .pem file). Alternately, use client_ssl_cert_key in conjuction with
#   client_ssl_cert for individual files.
#
# client_ssl_cert:


# client_ssl_cert_key (NoneType, str)
#   aliases: client_cert_key
#   Used in conjunction with client_ssl_cert for a matching key file.
#
# client_ssl_cert_key:


# clobber (bool)
#   Allow clobbering of overlapping file paths within packages, and
#   suppress related warnings. Overrides the path_conflict configuration
#   value when set to 'warn' or 'prevent'.
#
clobber: true


# create_default_packages (sequence: str)
#   string delimiter: ','
#   Packages that are by default added to a newly created environments.
#
# create_default_packages: [flake8, ipython]
# These should just have their own jupyter environment and not interfere with others


# custom_channels (map: str)
#   A map of key-value pairs where the key is a channel name and the value
#   is a channel location. Channels defined here override the default
#   'channel_alias' value. The channel name (key) is not included in the
#   channel location (value).  For example, to override the location of
#   the 'conda-forge' channel where the url to repodata is
#   https://anaconda-repo.dev/packages/conda-forge/linux-64/repodata.json,
#   add an entry 'conda-forge: https://anaconda-repo.dev/packages'.
#
# custom_channels: {}

# custom_multichannels (map: list)
#   A multichannel is a metachannel composed of multiple channels. The two
#   reserved multichannels are 'defaults' and 'local'. The 'defaults'
#   multichannel is customized using the 'default_channels' parameter. The
#   'local' multichannel is a list of file:// channel locations where
#   conda-build stashes successfully-built packages.  Other multichannels
#   can be defined with custom_multichannels, where the key is the
#   multichannel name and the value is a list of channel names and/or
#   channel urls.
#
# custom_multichannels: {}

# default_channels (sequence: str)
#   string delimiter: ','
#   The list of channel names and/or urls used for the 'defaults'
#   multichannel.
#
# Unfortunately haven't learned R yet.
#
default_channels:
  - https://repo.anaconda.com/pkgs/main
  - https://repo.anaconda.com/pkgs/free
#   - https://repo.anaconda.com/pkgs/r
  - https://repo.anaconda.com/pkgs/pro

# disallowed_packages (sequence: str)
#   aliases: disallow
#   string delimiter: '&'
#   Package specifications to disallow installing. The default is to allow
#   all packages.
#
# disallowed_packages: []

# download_only (bool)
#   Solve an environment and ensure package caches are populated, but exit
#   prior to unlinking and linking packages into the prefix
#
# download_only: false

# envs_dirs (sequence: str)
#   aliases: envs_path
#   string delimiter: ':'
#   The list of directories to search for named environments. When
#   creating a new named environment, the environment will be placed in
#   the first writable location.
#
# envs_dirs: []


# force (bool)
#   Override any of conda's objections and safeguards for installing
#   packages and potentially breaking environments. Also re-installs the
#   package, even if the package is already installed. Implies --no-deps.
#
# force: false


# local_repodata_ttl (bool, int)
#   For a value of False or 0, always fetch remote repodata (HTTP 304
#   responses respected). For a value of True or 1, respect the HTTP
#   Cache-Control max-age header. Any other positive integer values is the
#   number of seconds to locally cache repodata before checking the remote
#   server for an update.
#
# local_repodata_ttl: 1

# max_shlvl (int)
#   The maximum number of stacked active conda environments.
#
max_shlvl: 2

# migrated_channel_aliases (sequence: str)
#   string delimiter: ','
#   A list of previously-used channel_alias values, useful for example
#   when switching between different Anaconda Repository instances.
#
# migrated_channel_aliases: []

# no_dependencies (bool)
#   aliases: no_deps
#   Do not install, update, remove, or change dependencies. This WILL lead
#   to broken environments and inconsistent behavior. Use at your own
#   risk.
#
# no_dependencies: false

# non_admin_enabled (bool)
#   Allows completion of conda's create, install, update, and remove
#   operations, for non-privileged (non-root or non-administrator) users.
#
# non_admin_enabled: true

# notify_outdated_conda (bool)
#   Notify if a newer version of conda is detected during a create,
#   install, update, or remove operation.
#
notify_outdated_conda: true

# offline (bool)
#   Restrict conda to cached download content and file:// based urls.
#
# offline: false

# override_channels_enabled (bool)
#   Permit use of the --overide-channels command-line flag.
#
# override_channels_enabled: true

# path_conflict (PathConflict)
#   The method by which conda handle's conflicting/overlapping paths
#   during a create, install, or update operation. The value must be one
#   of 'clobber', 'warn', or 'prevent'. The '--clobber' command-line flag
#   or clobber configuration parameter overrides path_conflict set to
#   'prevent'.
#
# path_conflict: warn

# proxy_servers (map: NoneType, str)
#   A mapping to enable proxy settings. Keys can be either (1) a
#   scheme://hostname form, which will match any request to the given
#   scheme and exact hostname, or (2) just a scheme, which will match
#   requests to that scheme. Values are are the actual proxy server, and
#   are of the form 'scheme://[user:password@]host[:port]'. The optional
#   'user:password' inclusion enables HTTP Basic Auth with your proxy.
#
# proxy_servers: {}

# quiet (bool)
#   Disable progress bar display and other output.
#
# quiet: false

# remote_connect_timeout_secs (float)
#   The number seconds conda will wait for your client to establish a
#   connection to a remote url resource.
#
# remote_connect_timeout_secs: 9.15

# remote_max_retries (int)
#   The maximum number of retries each HTTP connection should attempt.
#
# remote_max_retries: 3

# remote_read_timeout_secs (float)
#   Once conda has connected to a remote resource and sent an HTTP
#   request, the read timeout is the number of seconds conda will wait for
#   the server to send a response.
#
# remote_read_timeout_secs: 60.0

# report_errors (NoneType, bool)
#   Opt in, or opt out, of automatic error reporting to core maintainers.
#   Error reports are anonymous, with only the error stack trace and
#   information given by `conda info` being sent.
#
report_errors: false

# rollback_enabled (bool)
#   Should any error occur during an unlink/link transaction, revert any
#   disk mutations made to that point in the transaction.
#
# rollback_enabled: true

# safety_checks (SafetyChecks)
#   Enforce available safety guarantees during package installation. The
#   value must be one of 'enabled', 'warn', or 'disabled'.
#
safety_checks: warn

# shortcuts (bool)
#   Allow packages to create OS-specific shortcuts (e.g. in the Windows
#   Start Menu) at install time.
#
shortcuts: true

# show_channel_urls (NoneType, bool)
#   Show channel URLs when displaying what is going to be downloaded.
#
# show_channel_urls:

# ssl_verify (bool, str)
#   aliases: verify_ssl
#   Conda verifies SSL certificates for HTTPS requests, just like a web
#   browser. By default, SSL verification is enabled, and conda operations
#   will fail if a required url's certificate cannot be verified. Setting
#   ssl_verify to False disables certification verificaiton. The value for
#   ssl_verify can also be (1) a path to a CA bundle file, or (2) a path
#   to a directory containing certificates of trusted CA.
#
# ssl_verify: true

# track_features (sequence: str)
#   string delimiter: ','
#   A list of features that are tracked by default. An entry here is
#   similar to adding an entry to the create_default_packages list.
#
# track_features: []

# use_index_cache (bool)
#   Use cache of channel index files, even if it has expired.
#
# use_index_cache: false

# use_pip (bool)
#   Include non-conda-installed python packages with conda list. This does
#   not affect any conda command or functionality other than the output of
#   the command conda list.
#
# use_pip: true

# verbosity (int)
#   aliases: verbose
#   Sets output log level. 0 is warn. 1 is info. 2 is debug. 3 is trace.
#
# verbosity: 0

# whitelist_channels (sequence: str)
#   string delimiter: ','
#   The exclusive list of channels allowed to be used on the system. Use
#   of any other channels will result in an error. If conda-build channels
#   are to be allowed, along with the --use-local command line flag, be
#   sure to include the 'local' channel in the list. If the list is empty
#   or left undefined, no channel exclusions will be enforced.
#
# whitelist_channels: []
