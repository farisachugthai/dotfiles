# Tmux configuration
# Maintainer: Faris Chugthai

# Pro tip: See your current options with C-a :show -g

# General and server options: {{{1
unbind C-b                                  # remap prefix from 'C-b' to 'C-a'
source-file "$HOME/.tmux/byobu_bindings.tmux"
source-file "$HOME/.tmux/mouse.enable.tmux"
set-environment -g TERM "tmux-256color"
set -g default-terminal "tmux-256color"
# recommended by nvim -ccheckhealth of all things
set-option -sa terminal-overrides ',XXX:RGB'
# Shrugs recommended by xterm-true-color
set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
# true color override
set -as terminal-overrides ',xterm*:Tc:sitm=\E[3m'
# The following helps with Shift-PageUp/Shift-PageDown
set -ga terminal-overrides 'xterm*:smcup@:rmcup@'

set -sg escape-time 5              # Reduce delay but give typing time

set -g exit-empty off
set -g exit-unattached off
set -g focus-events on
# Give a location for all commands sent on tmux command line
set -g history-file "$HOME/.local/share/tmux-history"
set-environment -r TERM
set-environment -g TERM "tmux-256color"

# }}}

# Session: {{{

set -g bell-action none
# Apparently this is a bad idea to the point that tmux won't start
# set -g default-command 'tmux -2u'
# Must set default-command to $SHELL, in order to not source ~/.profile
set -g default-shell /bin/bash
set -g detach-on-destroy off
set -g history-limit 5000
set -g mouse on
set -g prefix 'C-a'
set -g renumber-windows on
set -g set-titles on                        # Window titles
set -g display-time 4000
set -g display-panes-time 150
setw -g pane-base-index 0      # Make panes consistent
set -g set-titles-string "#T"               # Change hostname in window title

# todo: bind d choose-detach
# }}}

# Word separators: {{{
# Line 649 in the man page aka the section under copy mode key tables
# The next and previous word keys use space and the `-', `_' and `@'
# characters as word delimiters by default, but this can be adjusted by
# setting the word-separators session option.  Next word moves to the start
# of the next word, next word end to the end of the next word and previous
# word to the start of the previous word.  The three next and previous
# space keys work similarly but use a space alone as the word separator.

# Wait it only defines those??? Uh let's add at least a *COUPLE* of the Vim ones. im so curious how quoting and escaping is gonnahandle this
set -g word-separators '"_/\\!@#$%^&*(){}<>?[]+-='
# }}}

# Notifications: {{{
set -g visual-activity on            # Options for notifications
set -g visual-bell off
set -g visual-silence off
# todo: bind d choose-detach
set-window-option -g monitor-activity on
# }}}

# Windows: {{{
unbind %
# Split the window in the cwd
bind - split-window -v -c "#(pane_current_path)"
unbind '"'
bind '\' split-window -h -c "#{pane_current_path}"
# Well didn't see that coming. Just did <C-a>c and it spawned a `sh` shell...
# Actually woops that was a different problem
bind c new-window -Pc "#{pane_current_path}" "bash -il"

# Do I not have Tab bound???
bind -r Tab choose-window

set -g base-index 0                         # Start numbering at 1
set -g renumber-windows on                  # Renumber windows
setw -g automatic-rename on
setw -g aggressive-resize on
setw -g allow-rename on
setw -g xterm-keys on

# tile all windows
unbind =
bind = select-layout tiled

set-hook -g after-split-window "selectl even-vertical"
# }}}

# Vim_Panes: {{{
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

bind -r H resize-pane -L 5                  # -r means repeatable and this
bind -r J resize-pane -D 5                  # allows us to press prefix once
bind -r K resize-pane -U 5                  # hit the modifier until we're
bind -r L resize-pane -R 5                  # satisfied with our selection

bind C-v source-file ~/.tmux/vim-vert.tmux
# Split the window horizontally and open Vim
bind C-h source-file ~/.tmux/vim-horiz.tmux
# There are a TON of cool format strings to be utilized for panes and so far it
# doesn't look like I've activated one. set -g pane`
# }}}

# Copy / Paste Mode: {{{
# Got the correct syntax from the man page.

# Commands are sent to copy mode using the -X flag to the send-keys command.
# When a key is pressed, copy mode automatically uses one of two key tables,
# depending on the mode-keys option: copy-mode for emacs, or copy-mode-vi for
# vi.  Key tables may be viewed with the list-keys command

setw -g mode-keys vi
# Binding Escape to copy mode still allows C-a [ so don't unbind that
bind Escape copy-mode
unbind P
bind P choose-buffer                        # Prefix-P - Choose paste buffer
bind -T copy-mode-vi Escape send -X cancel

# use the default Space for begin selection and enter for copy selection and cancel
bind -T copy-mode-vi y send-keys -X copy-selection
# Check below in sourced files for emacs.tmux where I add standard emacs keys to vim copy mode
# }}}

# Convenience Bindings: {{{

# -- copy mode -----------------------------------------------------------------
# Note that the option `-b` indicates to run in background
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
# i assume that this'll behave the prefix key in 'yy' but it isn't
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'

# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
# if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'

# -- buffers -------------------------------------------------------------------

bind-key -T prefix b list-buffers  # list paste buffers
# }}}

# Emulating Screen: {{{

# kill K k
unbind K
bind K confirm-before "kill-window"
unbind k
bind k confirm-before "kill-window"

# redisplay ^L l
unbind ^L
bind ^L refresh-client
unbind l
bind l refresh-client

# }}}

# Other: {{{

# Set the cursor shape properly in Nvim
# TODO: There are 2 recommended overrides. Is this for konsole exclusively or all terms?
# set -ga terminal-overrides 'xterm*:\E]50;CursorShape=%?%p1%{3}%<%t%{0}%e%{1}%;%d\007'

bind-key -T prefix T split-window -h htop             # View htop with a simple Prefix-t

# clear both screen and history
bind-key -T prefix C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# i           Display some information about the current window.
# If -p is given, the output is printed to stdout, otherwise it is displayed
# in the target-client status line.

# if-shell "conda" "unbind i" "bind i run-shell 'conda activate utilities && ipython'"
# Don't do it this way. These 2 statements work as an if else so this will bind
# i only if conda isn't avaiable
if-shell "conda" "bind i run-shell 'conda activate utilities && ipython'"
# }}}

# Root Table/Prefix Bindings: {{{

# From: https://github.com/gpakosz/.tmux/blob/master/.tmux.conf#L26
bind e new-window -n '~/.tmux.conf' "bash -c '\${EDITOR:-nvim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"

# Suggested in the man page.
bind R source-file "$HOME/.tmux.conf"

# optional local config. From JustinMK
if-shell 'test -f ~/.tmux.conf.local' 'source-file ~/.tmux.conf.local'

# source in those emacs bindings!
if-shell "test -f ~/.tmux/emacs.tmux" "source-file ~/.tmux/emacs.tmux"

# lower case f is bound but almost no uppercases are! Doesnt work
if-shell "test -f $HOME/.tmux/fzf_url.sh" "bind-key F run-shell $HOME/.tmux/fzf_urls.sh"

# Just noticed C-d is also detach. Just d is fine thank you
unbind -T prefix C-d
bind -r -T prefix C-u                   send-keys -X halfpage-up
bind -r -T prefix C-d                   send-keys -X halfpage-down

# the man page.  changed to M tho. note that the argument to -p is the prompt
bind M command-prompt -p "Man Page Query: " "split-window 'exec man %%'"

bind S command-prompt -p 'New Window' "new-window -n %1 'ss  h %1'"
bind -r > swap-window -t :+
bind -r < swap-window -t :-
bind bspace previous-window
bind space next-window

# }}}

# Vim Tmux Navigator: {{{
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind -T copy-mode-vi C-h select-pane -L
bind -T copy-mode-vi C-j select-pane -D
bind -T copy-mode-vi C-k select-pane -U
bind -T copy-mode-vi C-l select-pane -R
bind -T copy-mode-vi 'C-\' select-pane -l
# }}}

# Override everything statusline related
source-file "$HOME/.tmux/statusline3.tmux"

# Vim: set fdls=0:

