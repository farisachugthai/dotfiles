# inputrc
# Includes all persistant modifications to GNU readline
# Maintainer: Faris Chugthai

# Binds: {{{1
# To a shocking extent termux has nothijg set up

"\C-w": unix-filename-rubout

# Switch keymaps: {{{1
# Apr 17, 2019: Running `bind -p` showed that nothing is bound to emacs editing mode.
# Let's bind it to the keys described in rluserman

# $if mode = vi
#     Control-e: set emacs-editing-mode
# $else
#     "\C-M-j": set  vi-editing-mode
# $endif

# emacs-editing-mode (C-e)
#     When in vi command mode, this causes a switch to emacs editing mode.

# vi-editing-mode (M-C-j)
#     When in emacs editing mode, this causes a switch to vi editing mode.

# In an attempt to prevent RSI: {{{1
set editing-mode vi
set keymap vi

# Options: {{{1
# From Arch Wiki and man bash

# When using TAB for completions, the double tab can be changed to a single tab
# This also shows all partial completions
set show-all-if-ambiguous on

# Color files by types
set colored-stats On

# Append char to indicate type
set visible-stats On
#
# Mark symlinked directories
set mark-symlinked-directories On

# Color the common prefix
set colored-completion-prefix On

# Color the common prefix in menu-complete
set menu-complete-display-prefix On

# When set to On, readline will configure the terminal that will enable it to
# insert each paste as a single string of characters, instead of treating each
# character as if it had been read from the keyboard.  This can
# prevent pasted characters from being interpreted as editing commands.
set enable-bracketed-paste On

# Show mode in prompt! IPythons been doing this as well. Line 3209 man bash
set show-mode-in-prompt On

# Apr 12, 2019: Line 3200 man bash
set blink-matching-paren


# words which have more than one possible completion without any possible
# partial completion (the possible completions don't share a common prefix)
# cause the matches to be listed immediately instead of ringing the bell.
set show-all-if-unmodified

set expand-tilde

# From /usr/share/readline/inputrc example: {{{2
set bell-style none

# should we? default off. my arrow keys work idk
# not the arrow keys the application keypad too. do it
set enable-keypad on

# 8 bit clean
set input-meta on
set output-meta on
set convert-meta off

# History Search: {{{1

# https://ss64.com/bash/bind.html
# Setup the shell to perform a history search when the Up and Down arrow keys are used.
# This allows typing part of a command and then using the arrows to select
# matching commands from history.
# (by default Up and Down will just select previous commands without any
# matching against history.)

bind '"\e[A":history-search-backward'
bind '"\e[B":history-search-forward'
bind '"\e[C": forward-char'
bind '"\e[D": backward-char'

# The last two bindings ensure that the left and right keys continue to work correctly.

# Include: {{{1
# $include  /etc/inputrc
#
# Bindings: {{{1

# some defaults / modifications for the emacs mode
# $if mode=emacs
# jk do it no matter what these are useful

# allow the use of the Home/End keys
"\e[1~": beginning-of-line
"\e[4~": end-of-line

# allow the use of the Delete/Insert keys
"\e[3~": delete-char
"\e[2~": quoted-insert

# mappings for "page up" and "page down" to step to the beginning/end
# of the history
"\e[5~": beginning-of-history
"\e[6~": end-of-history

# alternate mappings for "page up" and "page down" to search the history
# "\e[5~": history-search-backward
# "\e[6~": history-search-forward

# mappings for Ctrl-left-arrow and Ctrl-right-arrow for word moving
"\e[1;5C": forward-word
"\e[1;5D": backward-word
"\e[5C": forward-word
"\e[5D": backward-word
"\e\e[C": forward-word
"\e\e[D": backward-word

# I don't know what these escape codes mean so leave them commented out
# $if term=rxvt
# "\e[7~": beginning-of-line
# "\e[8~": end-of-line
# "\eOc": forward-word
# "\eOd": backward-word
# $endif

# # for non RH/Debian xterm, can't hurt for RH/Debian xterm
# # "\eOH": beginning-of-line
# # "\eOF": end-of-line

# # for freebsd console
# # "\e[H": beginning-of-line
# # "\e[F": end-of-line

# $endif
