# All the emacs key bindings
# bind -m vi -p
# displays every key bindin i have and holy cow.
# up and down work again too

# {{{
set editing-mode vi

set keymap vi-insert

# {{{ insert mode
"\C-j": accept-line
"\C-m": accept-line
# alias-expand-line (not bound)
# arrow-key-prefix (not bound)
# backward-byte (not bound)
"\C-b": backward-char
"\eOD": backward-char
"\e[D": backward-char
"\C-h": backward-delete-char
"\C-?": backward-delete-char
"\C-x\C-?": backward-kill-line
"\e\C-h": backward-kill-word
"\e\C-?": backward-kill-word
"\e[1;3D": backward-word
"\e[1;5D": backward-word
"\eb": backward-word
"\e<": beginning-of-history
"\C-a": beginning-of-line
"\eOH": beginning-of-line
"\e[1~": beginning-of-line
"\e[H": beginning-of-line
"\e[200~": bracketed-paste-begin
"\C-xe": call-last-kbd-macro
# capitalize-word (not bound)
"\C-]": character-search
"\e\C-]": character-search-backward
"\C-l": clear-screen
"\e!": complete-command
# Is this escaped right?
"\e\/": complete-filename
"\e@": complete-hostname
"\e{": complete-into-braces
"\e~": complete-username
"\e$": complete-variable
# copy-backward-word (not bound)
# copy-forward-word (not bound)
# copy-region-as-kill (not bound)
# dabbrev-expand (not bound)
"\C-d": delete-char-or-list
"\e[3~": delete-char
"\e\\": delete-horizontal-space
"\e-": digit-argument
"\e0": digit-argument
"\e1": digit-argument
"\e2": digit-argument
"\e3": digit-argument
"\e4": digit-argument
"\e5": digit-argument
"\e6": digit-argument
"\e7": digit-argument
"\e8": digit-argument
"\e9": digit-argument
"\C-x\C-v": display-shell-version
"\el": downcase-word
# dump-functions (not bound)
# dump-macros (not bound)
# dump-variables (not bound)
"\e\C-i": dynamic-complete-history
"\C-x\C-e": edit-and-execute-command
# emacs-editing-mode (not bound)
"\C-x)": end-kbd-macro
"\e>": end-of-history
"\C-e": end-of-line
"\eOF": end-of-line
"\e[4~": end-of-line
"\e[F": end-of-line
"\C-x\C-x": exchange-point-and-mark
# forward-backward-delete-char (not bound)
"\C-f": forward-char
"\eOC": forward-char
"\e[C": forward-char
"\e[1;3C": forward-word
"\e[1;5C": forward-word
"\ef": forward-word
"\eg": glob-complete-word
"\C-x*": glob-expand-word
"\C-xg": glob-list-expansions
"\C-r": history-search-backward
"\C-s": history-search-forward
# What in gods name is the difference between these 2?
# "\C-s": forward-search-history
"\e#": insert-comment
"\e*": insert-completions
"\e.": insert-last-argument
"\e_": insert-last-argument
"\C-k": kill-whole-line
"\ek": kill-region
"\e[3;5~": kill-word
"\ed": kill-word
"Space": magic-space
"TAB": menu-complete
"\e?": menu-complete
"\e/": menu-complete-backward
"\C-n": next-history

# What is PageUp and PageDown?
# next-screen-line (not bound)
"\en": non-incremental-forward-search-history
"\ep": non-incremental-reverse-search-history
# old-menu-complete (not bound)
"\C-o": operate-and-get-next
"\e[2~": overwrite-mode
"\C-x!": possible-command-completions
"\e=": possible-completions
"\C-x/": possible-filename-completions
"\C-x@": possible-hostname-completions
"\C-x~": possible-username-completions
"\C-x$": possible-variable-completions
"\C-p": previous-history
# previous-screen-line (not bound)
# print-last-kbd-macro (not bound)
"\C-q": quoted-insert
"\C-v": quoted-insert
"\er": redraw-current-line
"\C-x\C-r": re-read-init-file
# reverse-search-history (not bound)
"\e\C-r": revert-line

"\C-@": set-mark
"\e ": set-mark
# shell-backward-kill-word (not bound)
# shell-backward-word (not bound)
"\e\C-e": shell-expand-line
# shell-forward-word (not bound)
# shell-kill-word (not bound)
# skip-csi-sequence (not bound)
"\C-x(": start-kbd-macro
# tab-insert (not bound)
"\e&": tilde-expand
"\C-t": transpose-chars
"\et": transpose-words
# tty-status (not bound)
"\C-x\C-u": undo
"\C-_": undo
"\C-u": universal-argument
# "\C-u": unix-line-discard
# "\C-w": unix-filename-rubout
"\eu": upcase-word
"\C-y": yank
"\e.": yank-last-arg
"\e_": yank-last-arg
"\e\C-y": yank-nth-arg
"\ey": yank-pop
"\C-Space": menu-complete
#  }}}

# Me struggling with the arrow keys: {{{
"\eOA": previous-history
"\e[A": previous-history
"\eOB": next-history
"\e[B": next-history
"\eOD": backward-char
"\e[C": forward-char
"\e[D": backward-char
# Meta-Control-h:    backward-kill-word      Text after the function name is ignored

# Arrow keys in keypad mode

"\M-OD":        backward-char
"\M-OC":        forward-char
"\M-OA":        previous-history
"\M-OB":        next-history

# Arrow keys in ANSI mode
"\M-[D":        backward-char
"\M-[C":        forward-char
"\M-[A":        previous-history
"\M-[B":        next-history

# Arrow keys in 8 bit keypad mode                                           
"\M-\C-OD":       backward-char
"\M-\C-OC":       forward-char
"\M-\C-OA":       previous-history
"\M-\C-OB":       next-history

# Arrow keys in 8 bit ANSI mode
"\M-\C-[D":       backward-char
"\M-\C-[C":       forward-char
"\M-\C-[A":       previous-history
"\M-\C-[B":       next-history

# }}}

# From clink: {{{

# Pleasantly surprised with these!
# Gotta figure out how to check for the conditional clink tho

# Easy. It's default installed everywhere so
$if cmd.exe

"set" keymap vi-insert
"\t":               clink-completion-shim
"\C-V":                paste-from-clipboard
"\C-q":                reload-lua-state
"\C-z":                undo
"\M-h":                show-rl-help
"\e\C-c":              copy-line-to-clipboard
"\C-c":                ctrl-c
"\e-a":                "..\\"
"\e`U":         up-directory
"\e\C-u":          up-directory
"\e\C-e":          expand-env-vars


"set" keymap emacs-insert

"\t":               clink-completion-shim
"\C-v":                paste-from-clipboard
"\C-z":                undo
"\e-h":                show-rl-help
"\e\C-c":              copy-line-to-clipboard
"\C-c":                ctrl-c
"\e-a":                "..\\"
"\e`U":         up-directory
"\e\C-u":          up-directory
"\e\C-e":          expand-env-vars

"set" keymap vi-move
"\C-v":                paste-from-clipboard
"\C-z":                undo
"\e\C-h":                show-rl-help
"\e\C-c":              copy-line-to-clipboard
"\C-c":                ctrl-c
"\e-a":                "..\\"
"\e`U":         up-directory
"\e\C-u":          up-directory
"\e\C-e":          expand-env-vars
$endif

# }}}

set keymap vi-command

# But I still want all the normal vi commands: {{{

"A": vi-append-eol
"a": vi-append-mode
"1": vi-arg-digit
"2": vi-arg-digit
"3": vi-arg-digit
"4": vi-arg-digit
"5": vi-arg-digit
"6": vi-arg-digit
"7": vi-arg-digit
"8": vi-arg-digit
"9": vi-arg-digit
# "B": vi-bWord
# vi-back-to-indent (not bound)
"gE": vi-backward-bigword
# (not bound)
"ge": vi-backward-word
# (not bound)
# vi-bword (not bound)
"~": vi-change-case
"r": vi-change-char
"C": vi-change-to
"c": vi-change-to
",": vi-char-search
";": vi-char-search
"F": vi-char-search
"T": vi-char-search
"f": vi-char-search
"t": vi-char-search
"|": vi-column
"\C-Space": vi-complete
"x": vi-delete
"D": vi-delete-to
"d": vi-delete-to
"\C-E": vi-editing-mode
"E": vi-end-word
"e": vi-end-word
"\C-d": vi-eof-maybe
# change C-e so we dont end up in emacs!!!
# vi-eword (not bound)
# vi-fWord (not bound)
# "W": vi-forward-bigword (not bound)
# "w": vi-forward-word (not bound)
"G": vi-fetch-history
"^": vi-first-print
# vi-forward-bigword (not bound)
# vi-forward-word (not bound)
# vi-fword (not bound)
# vi-fWord (not bound)
"`": vi-goto-mark
"I": vi-insert-beg
"i": vi-insertion-mode
"%": vi-match

# whats the difference between movement insertion and editing
"W": vi-next-word
"w": vi-next-word
"Insert": vi-overstrike
# vi-overstrike-delete (not bound)
"B": vi-prev-word
"b": vi-prev-word
"P": vi-put
"p": vi-put
".": vi-redo
"R": vi-replace
"X": vi-rubout
"/": vi-search
"?": vi-search
"N": vi-search-again
"n": vi-search-again
"m": vi-set-mark
"S": vi-subst
"u": vi-undo
"w": vi-next-word
"x": vi-delete
"s": vi-subst
"&": vi-tilde-expand
"\C-w": vi-filename-rubout
"_": vi-yank-arg
"\C-y": vi-yank-pop
"Y": vi-yank-to

"/": non-incremental-forward-search-history
"n": non-incremental-forward-search-history-again
"?": non-incremental-reverse-search-history
"n": non-incremental-reverse-search-history-again

"\C-H"  backward-delete-char
"\C-x\C-r": re-read-init-file
Control-u: universal-argument
Meta-Rubout: backward-kill-word

# }}}

# VI Command Mode functions: {{{

"\C-G":  abort
"\C-H":  backward-char
"\C-J":  accept-line
"\C-K":  kill-whole-line
"\C-L":  clear-screen
"\C-M":  accept-line
"\C-N":  next-history
"\C-P":  previous-history
"\C-Q":  quoted-insert
"\C-R":  reverse-search-history
"\C-S":  forward-search-history
"\C-T":  transpose-chars
# "\C-U":  unix-line-discard
"\C-U":  universal-argument
"\C-V":  quoted-insert
"\C-Y":  yank
"\C-_":  vi-undo
" ":  forward-char
"#":  insert-comment
"$":  end-of-line
"*":  vi-complete
"+":  next-history
"-":  previous-history
"0":  beginning-of-line
# "1" to "9"  vi-arg-digit
"=":  vi-complete
"\\":  vi-complete
"j":  next-history
"k":  prev-history
"l":  forward-char

# }}}

# Options: {{{

set show-mode-in-prompt on
# from info readline
set match-hidden-files on
set revert-all-at-newline on

# From Arch Wiki and man bash
# When using TAB for completions, the double tab can be changed to a single tab
# This also shows all partial completions
set show-all-if-ambiguous on

# Color files by types
set colored-stats On

# Append char to indicate type
set visible-stats On
#
# Mark symlinked directories
set mark-symlinked-directories On

# If set to On, history lines that have been modified are displayed with a
# preceding asterisk (*).
# Otherwise you just go back, modify history and it never shows you that it
# wasn't the original command which I find confusing.
set mark-modified-lines On

# Color the common prefix
set colored-completion-prefix On

# Color the common prefix in menu-complete
set menu-complete-display-prefix On

# When set to On, readline will configure the terminal that will enable it to
# insert each paste as a single string of characters, instead of treating each
# character as if it had been read from the keyboard.  This can
# prevent pasted characters from being interpreted as editing commands.
set enable-bracketed-paste On

# Show mode in prompt! IPythons been doing this as well. Line 3209 man bash
# Apr 12, 2019: Line 3200 man bash
set blink-matching-paren

# Times out too fast at 500
set keyseq-timeout 1000

# words which have more than one possible completion without any possible
# partial completion (the possible completions don't share a common prefix)
# cause the matches to be listed immediately instead of ringing the bell.
set show-all-if-unmodified on

set expand-tilde on

set completion-ignore-case on

# From /usr/share/readline/inputrc example:
set bell-style none

# should we? default off. my arrow keys work idk
# not the arrow keys the application keypad too. do it
set enable-keypad on

# 8 bit clean
set input-meta on
set output-meta on

# YO! don't do this we don't need fucking umlauts i need teh ALT key
# set convert-meta off

set mark-symlinked-directories on

set skip-completed-text on

# History Search:

set history-preserve-point on

# https://ss64.com/bash/bind.html
# Setup the shell to perform a history search when the Up and Down arrow keys are used.
# This allows typing part of a command and then using the arrows to select
# matching commands from history.
# (by default Up and Down will just select previous commands without any
# matching against history.)

# "\e[A": history-search-backward
# "\e[B": history-search-forward
# }}}

set keymap vi-insert
# }}}
# Ive been using emacs mode so we should try binding things to that namespace

set editing-mode emacs

"\C-w": unix-filename-rubout
"\C-[": vi-movement-mode
"\C-x\C-r": re-read-init-file
"\C-Space": menu-complete
"\C-x\C-e": edit-and-execute-command
"\C-k": kill-whole-line
"\eg": glob-complete-word
"\C-x*": glob-expand-word
"\C-xg": glob-list-expansions
"Space": magic-space

# history-expand-line (not bound)
# Holy shit this is a cool binding. Doesn't dynamically change though.
# l<Alt+Shift+6> --> ls -alth --color=always
# Hitting \e^ again repeats the previously added text which is lame.
"\e^": history-and-alias-expand-line
"\e\C-e": shell-expand-line

# Vim: set fdm=marker fdls=0:
