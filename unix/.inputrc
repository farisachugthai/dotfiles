# inputrc
# Includes all persistant modifications to GNU readline
# Maintainer: Faris Chugthai

# To view currently set options run
# `bind -v`
# bind -p has some dope functions and a useful and very clear IMO layout of things

# All:
#readlineKeySeparator xxx match /-/  contained nextgroup=readlineKeyName,readlineKey
                   #links to readlineKeySeq
#readlineFunction xxx contained self-insert digit-argument vi-append-eol yank-last-arg
                   #contained accept-line vi-subst vi-subst vi-undo vi-undo vi-char-search
                   #contained vi-char-search vi-char-search vi-char-search vi-char-search
                   #contained yank-pop vi-column vi-complete vi-yank-to vi-yank-to vi-match
                   #contained character-search vi-prev-word vi-prev-word vi-search-again
                   #contained vi-search-again beginning-of-line backward-kill-line kill-line
                   #contained tilde-expand kill-region menu-complete prefix-meta end-kbd-macro
                   #contained set-mark vi-redo next-history yank vi-end-word vi-end-word
                   #contained vi-replace dump-variables redraw-current-line undo upcase-word
                   #contained vi-goto-mark complete backward-delete-char print-last-kbd-macro
                   #contained menu-complete-backward vi-change-case kill-whole-line
                   #contained unix-filename-rubout beginning-of-history yank-nth-arg
                   #contained insert-comment start-kbd-macro exchange-point-and-mark
                   #contained non-incremental-forward-search-history re-read-init-file
                   #contained vi-append-mode vi-arg-digit dump-macros do-uppercase-version
                   #contained skip-csi-sequence call-last-kbd-macro kill-word vi-editing-mode
                   #contained quoted-insert vi-movement-mode forward-word backward-word
                   #contained clear-screen downcase-word tab-insert
                   #contained non-incremental-reverse-search-history copy-region-as-kill
                   #contained unix-word-rubout delete-char overwrite-mode transpose-chars                                                                contained copy-forward-word transpose-words history-search-forward
                   #contained forward-char vi-put vi-put backward-char revert-line                                                                       contained backward-kill-word previous-history unix-line-discard vi-eof-maybe                                                         contained vi-search character-search-backward vi-set-mark capitalize-word                                                            contained end-of-history history-search-backward vi-insert-mode vi-delete-to                                                         contained vi-delete-to vi-yank-arg vi-tilde-expand vi-next-word vi-next-word
                   #contained vi-insert-beg delete-horizontal-space insert-completions
                   #contained possible-completions emacs-editing-mode end-of-line vi-change-char
                   #contained dump-functions vi-fetch-history vi-change-to vi-change-to
                   #contained reverse-search-history vi-first-print delete-char-or-list
                   #contained forward-backward-delete-char vi-delete universal-argument abort copy-backward-word
                   #contained forward-search-history
                   #links to Function
		   ## 
# Newer settings: {{{
# As a reminder \e == Alt == Esc + Pause
TAB: complete
"\C-g": abort
"\C-a": beginning-of-line
"\C-b": backward-char
"\C-l": clear-screen

"\C-f": forward-char

# Alt-Tab I think
"\e\C-i": dynamic-complete-history

# Yeah this is the chord C-x C-e
"\C-x\C-e": edit-and-execute-command

# Alt-BS
"\e\C-h": backward-kill-word

# }}}

# info rluserman: {{{

"\ep": non-incremental-reverse-search-history
"\en": non-incremental-forward-search-history

"\C-q": quoted-insert

# Kill the wole line regardless of cursor position
"\C-k": kill-whole-line

# kill-region? sounds fun. that should be alt-k
"\ek": kill-region
# }}}

# Other: {{{
"\e<": beginning-of-history
"\e[200~": bracketed-paste-begin
"\C-]": character-search
"\e\C-]": character-search-backward
"\e\e": complete
"\e!": complete-command
"\e/": complete-filename
"\e@": complete-hostname
"\e{": complete-into-braces
"\e~": complete-username
"\e$": complete-variable

"\C-x\C-v": display-shell-version

"\C-x)": end-kbd-macro

"\e>": end-of-history

# EOF! I get it now!!!
"\eOF": end-of-line
"\e[F": end-of-line

"\C-x\C-x": exchange-point-and-mark
"\C-s": forward-search-history
"\C-x*": glob-expand-word
"\C-xg": glob-list-expansions
"\e#": insert-comment
"\e*": insert-completions
"\e.": insert-last-argument
"\e_": insert-last-argument
"\ed": kill-word
# "\C-n": next-history

"\C-x!": possible-command-completions
"\e=": possible-completions
"\e?": possible-completions
"\C-x/": possible-filename-completions
"\C-x@": possible-hostname-completions
"\C-x~": possible-username-completions
"\C-x$": possible-variable-completions
# "\C-p": previous-history
"\C-x\C-r": re-read-init-file
# fzf
# "\C-r": reverse-search-history
"\e\C-r": revert-line
"\er": revert-line
"\C-@": set-mark
"\e ": set-mark
# # fzf
# "\C-t": transpose-chars
"\e\C-e": shell-expand-line
"\C-x(": start-kbd-macro
"\et": transpose-words
"\C-x\C-u": undo
"\C-_": undo

# }}}

# All options set by set -o vim: {{{
"\C-h": backward-delete-char
# "\C-?": backward-delete-char
"\C-d": vi-eof-maybe
"\C-n": complete
"\C-p": menu-complete-backward
"\C-?": dump-functions
"\C-v": quoted-insert
"\C-u": unix-line-discard
"\C-w": unix-filename-rubout
"\C-y": yank
# }}}

# Pyreadline: {{{

# Use up down keys in a sensible manner and complete what i already typed
"\e[B": history-search-forward
"\e[A": history-search-backward


# }}}

# Switch Keymaps: {{{1

# emacs-editing-mode (not bound)
# vi-movement-mode (not bound)
$if mode = vi
"jk": prefix-meta

"\eA": vi-append-mode
"Shift-5": vi-match

	"\e\C-j": emacs-editing-mode

	set keymap vi-insert
	"jj": vi-movement-mode

	set keymap vi-command
	"gg": beginning-of-history
	"G": end-of-history
	set keymap vi

$else
	"\e\C-j": vi-editing-mode

	set keymap vi
	"\e\C-j": emacs-editing-mode
	set keymap vi-insert
	"jj": vi-movement-mode

	set keymap vi-command
	"gg": beginning-of-history
	"G": end-of-history
	set keymap emacs

$endif

"\ex": emacs-editing-mode
# i swear to god this is the correct spelling
"\C-\:": vi-insertion-mode
# }}}

# Bindings: {{{
# allow the use of the Home/End keys
"\e[1~": beginning-of-line
"\e[4~": end-of-line

# allow the use of the Delete/Insert keys
"\e[3~": delete-char
"\e[2~": quoted-insert

# mappings for "page up" and "page down" to step to the beginning/end
# of the history
"\e[5~": beginning-of-history
"\e[6~": end-of-history

# mappings for Ctrl-left-arrow and Ctrl-right-arrow for word moving
"\e[1;5C": forward-word
"\e[1;5D": backward-word
"\e[5C": forward-word
"\e[5D": backward-word
"\e\e[C": forward-word
"\e\e[D": backward-word

# Arrow keys in 8 bit keypad mode
# So we enabled keypad earlier so I'm gonna say this one
"\C-M-OD"       backward-char
"\C-M-OC"       forward-char
"\C-M-OA"       previous-history
"\C-M-OB"       next-history
#
# }}}

# Options: {{{

set show-mode-in-prompt on

set revert-all-at-newline on

# From Arch Wiki and man bash

# When using TAB for completions, the double tab can be changed to a single tab
# This also shows all partial completions
set show-all-if-ambiguous on

# Color files by types
set colored-stats On

# Append char to indicate type
set visible-stats On
#
# Mark symlinked directories
set mark-symlinked-directories On

# If set to On, history lines that have been modified are displayed with a
# preceding asterisk (*).
# Otherwise you just go back, modify history and it never shows you that it
# wasn't the original command which I find confusing.
set mark-modified-lines On

# Color the common prefix
set colored-completion-prefix On

# Color the common prefix in menu-complete
set menu-complete-display-prefix On

# When set to On, readline will configure the terminal that will enable it to
# insert each paste as a single string of characters, instead of treating each
# character as if it had been read from the keyboard.  This can
# prevent pasted characters from being interpreted as editing commands.
set enable-bracketed-paste On

# Show mode in prompt! IPythons been doing this as well. Line 3209 man bash
# Apr 12, 2019: Line 3200 man bash
set blink-matching-paren

# Times out too fast at 500
set keyseq-timeout 1000

# words which have more than one possible completion without any possible
# partial completion (the possible completions don't share a common prefix)
# cause the matches to be listed immediately instead of ringing the bell.
set show-all-if-unmodified on

set expand-tilde on

set completion-ignore-case on

# From /usr/share/readline/inputrc example:
set bell-style none

# should we? default off. my arrow keys work idk
# not the arrow keys the application keypad too. do it
set enable-keypad on

# 8 bit clean
set input-meta on
set output-meta on

# YO! don't do this we don't need fucking umlauts i need teh ALT key
# set convert-meta off

set mark-symlinked-directories on

set skip-completed-text on

# History Search:

set history-preserve-point on

set mark-modified-lines on
# https://ss64.com/bash/bind.html
# Setup the shell to perform a history search when the Up and Down arrow keys are used.
# This allows typing part of a command and then using the arrows to select
# matching commands from history.
# (by default Up and Down will just select previous commands without any
# matching against history.)

"\e[A": history-search-backward
"\e[B": history-search-forward
"\e[C": forward-char
"\e[D": backward-char

# The last two bindings ensure that the left and right keys continue to work correctly.

# isn't working
set history-size 10000

# what are these? from bind -v
# set completion-display-width -1
# set completion-prefix-display-length 0
# }}}

# Bindings: {{{

# some defaults / modifications for the emacs mode
# $if mode=emacs
# jk do it no matter what these are useful

# allow the use of the Home/End keys
"\e[1~": beginning-of-line
"\e[4~": end-of-line

# allow the use of the Delete/Insert keys
"\e[3~": delete-char
"\e[2~": quoted-insert

# mappings for "page up" and "page down" to step to the beginning/end
# of the history
"\e[5~": beginning-of-history
"\e[6~": end-of-history

# alternate mappings for "page up" and "page down" to search the history
# i think ctrl up and ctrl down
# "\e[5~": history-search-backward
# "\e[6~": history-search-forward

# mappings for Ctrl-left-arrow and Ctrl-right-arrow for word moving
"\e[1;5C": forward-word
"\e[1;5D": backward-word
"\e[5C": forward-word
"\e[5D": backward-word
"\e\e[C": forward-word
"\e\e[D": backward-word

# I don't know what these escape codes mean so leave them commented out
# $if term=rxvt
# "\e[7~": beginning-of-line
# "\e[8~": end-of-line
# "\eOc": forward-word
# "\eOd": backward-word
# $endif

 # for non RH/Debian xterm, can't hurt for RH/Debian xterm
 # "\eOH": beginning-of-line
 # "\eOF": end-of-line

 # for freebsd console
 # "\e[H": beginning-of-line
 # "\e[F": end-of-line

# From /usr/share/doc/bash/inputrc.arrows
# This file controls the behaviour of line input editing for
# programs that use the Gnu Readline library.
#
# Arrow keys in keypad mode
#
# "\C-[OD"        backward-char
# "\C-[OC"        forward-char
# "\C-[OA"        previous-history
# "\C-[OB"        next-history
#
# Arrow keys in ANSI mode
#
# "\C-[[D"        backward-char
# "\C-[[C"        forward-char
# "\C-[[A"        previous-history
# "\C-[[B"        next-history
#
# Arrow keys in 8 bit keypad mode
# So we enabled keypad earlier so I'm gonna say this one
"\C-M-OD"       backward-char
"\C-M-OC"       forward-char
"\C-M-OA"       previous-history
"\C-M-OB"       next-history
#
# Arrow keys in 8 bit ANSI mode
#
# "\C-M-[D"       backward-char
# "\C-M-[C"       forward-char
# "\C-M-[A"       previous-history
# "\C-M-[B"       next-history
# }}}

# From clink: {{{1

# Pleasantly surprised with these!
# Gotta figure out how to check for the conditional clink tho

# Easy. It's default installed everywhere so
$if cmd.exe

"\t":               clink-completion-shim
"\C-V":                paste-from-clipboard
"\C-q":                reload-lua-state
"\C-z":                undo
"\M-h":                show-rl-help
"\e\C-c":              copy-line-to-clipboard
"\C-c":                ctrl-c
"\e-a":                "..\\"

"set" keymap vi-insert
"\t":               clink-completion-shim
"\C-v":                paste-from-clipboard
"\C-z":                undo
"\e-h":                show-rl-help
"\e\C-c":              copy-line-to-clipboard
"\C-c":                ctrl-c
"\e-a":                "..\\"
#
"set" keymap vi-move
"\C-v":                paste-from-clipboard
"\C-z":                undo
"\e\C-h":                show-rl-help
"\e\C-c":              copy-line-to-clipboard
"\C-c":                ctrl-c
"\ea":                "..\\"
$endif

$if cmd.exe
    set keymap emacs
    "\e`U":         up-directory
    "\e\C-u":          up-directory
    "\e\C-e":          expand-env-vars

    set keymap vi-insert
    "\e`U":         up-directory
    "\e\C-u":          up-directory
    "\e\C-e":          expand-env-vars

    set keymap vi-move
    "\e`U":         up-directory
    "\e\C-u":          up-directory
    "\e\C-e":          expand-env-vars
$endif

$if Bash
    Space: magic-space
    "\C-Space": complete
$endif

# Well that was fucking awesome
# }}}
