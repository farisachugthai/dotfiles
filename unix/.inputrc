# inputrc
# Includes all persistant modifications to GNU readline
# Maintainer: Faris Chugthai

# To view currently set options run
# `bind -v`

# Every binding set -o emacs has that vim doesn't: {{{1
# As a reminder \e == Alt == Esc + Pause
#
"\C-g": abort
"\C-a": beginning-of-line
"\C-b": backward-char
"\C-d": delete-char
"\C-l": clear-screen

# Alt-Tab I think
"\e\C-i": dynamic-complete-history

# Yeah this is the chord C-x C-e
"\C-x\C-e": edit-and-execute-command

# Alt-BS
"\e\C-h": backward-kill-word

# info rluserman: {{{1

"M-p": non-incremental-reverse-search-history
"M-n": non-incremental-forward-search-history

"\C-q": quoted-insert

# Kill the wole line regardless of cursor position
Control-k: kill-whole-line
set revert-all-at-newline on
# Other: {{{1
"\e<": beginning-of-history
"\e[200~": bracketed-paste-begin
"\C-]": character-search
"\e\C-]": character-search-backward
"\e\e": complete
"\e!": complete-command
"\e/": complete-filename
"\e@": complete-hostname
"\e{": complete-into-braces
"\e~": complete-username
"\e$": complete-variable

"\C-x\C-v": display-shell-version

"\C-x)": end-kbd-macro

"\e>": end-of-history

# EOF! I get it now!!!
"\eOF": end-of-line
"\e[F": end-of-line

"\C-x\C-x": exchange-point-and-mark

"\C-f": forward-char
"\C-s": forward-search-history
"\C-x*": glob-expand-word
"\C-xg": glob-list-expansions
"\e#": insert-comment
"\e*": insert-completions
"\e.": insert-last-argument
"\e_": insert-last-argument
"\C-k": kill-line
"\ed": kill-word
"\C-n": next-history

"\C-x!": possible-command-completions
"\e=": possible-completions
"\e?": possible-completions
"\C-x/": possible-filename-completions
"\C-x@": possible-hostname-completions
"\C-x~": possible-username-completions
"\C-x$": possible-variable-completions
"\C-p": previous-history
"\C-x\C-r": re-read-init-file
"\C-r": reverse-search-history
"\e\C-r": revert-line
"\er": revert-line
"\C-@": set-mark
"\e ": set-mark
"\C-t": transpose-chars
"\e\C-e": shell-expand-line
"\C-x(": start-kbd-macro
"\et": transpose-words
"\C-x\C-u": undo
"\C-_": undo


# All options set by set -o vim
"\C-h": backward-delete-char
"\C-?": backward-delete-char
"\C-d": vi-eof-maybe
"\C-n": menu-complete
"\C-p": menu-complete-backward

# Let's use one of the other history searches there are so many functions for this
# "\C-r": reverse-search-history
"\C-v": quoted-insert

"\C-u": unix-line-discard
"\C-w": vi-unix-word-rubout
"\C-y": yank

# Pyreadline: {{{1

# Use up down keys in a sensible manner and complete what i already typed
"\e[B": history-search-forward
"\e[A": history-search-backward

# Binds: {{{1
# To a shocking extent termux has nothing set up

# "\C-w": unix-filename-rubout

# Switch Keymaps: {{{1

# emacs-editing-mode (not bound)
# vi-movement-mode (not bound)

# Let's bind it to the keys described in the readline library docs
# In order to switch interactively between emacs and vi editing modes, use the
# command M-C-j (bound to emacs-editing-mode when in vi mode and to
# vi-editing-mode in emacs mode). The Readline default is emacs mode.

# FZF: {{{1
# Yeah definitely make sure all of these work though...
$if mode = vi

"\e\C-j": emacs-editing-mode

set keymap vi-insert
"jj": vi-movement-mode

set keymap vi-command
"gg": beginning-of-history
"G": end-of-history
# bind '"\er": redraw-current-line'
# bind '"\C-g\C-f": "$(fgf)\e\C-e\er"'
# bind '"\C-g\C-b": "$(fgb)\e\C-e\er"'
# bind '"\C-g\C-t": "$(fgt)\e\C-e\er"'
# bind '"\C-g\C-h": "$(fgh)\e\C-e\er"'
# bind '"\C-g\C-r": "$(fgr)\e\C-e\er"'

$else

    # damn after removing a ton of bindings
    # *which btw leave them out i didn't know what most did
    # i came to the realization my readline bugs were from these bindings right here
# bind '"\er": redraw-current-line'
# bind '"\C-g\C-f": "$(gf)\e\C-e\er"'
# bind '"\C-g\C-b": "$(gb)\e\C-e\er"'
# bind '"\C-g\C-t": "$(gt)\e\C-e\er"'
# bind '"\C-g\C-h": "$(gh)\e\C-e\er"'
# bind '"\C-g\C-r": "$(gr)\e\C-e\er"'

"\e\C-j": vi-editing-mode

$endif

# emacs-editing-mode (C-e)
#     When in vi command mode, this causes a switch to emacs editing mode.

# vi-editing-mode (M-C-j)
#     When in emacs editing mode, this causes a switch to vi editing mode.

# In an attempt to prevent RSI: {{{1
# Woops. I just realized set -o emacs is still set in bashrc. Was wondering
# why things were behaving oddly
# set editing-mode vi
# set keymap vi
set editing-mode emacs
set keymap emacs
# Leave it on emacs they have so many more keys

# Options: {{{1
# From Arch Wiki and man bash

# When using TAB for completions, the double tab can be changed to a single tab
# This also shows all partial completions
set show-all-if-ambiguous on

# Color files by types
set colored-stats On

# Append char to indicate type
set visible-stats On
#
# Mark symlinked directories
set mark-symlinked-directories On

# If set to On, history lines that have been modified are displayed with a
# preceding asterisk (*).
# Otherwise you just go back, modify history and it never shows you that it
# wasn't the original command which I find confusing.
set mark-modified-lines On

# Color the common prefix
set colored-completion-prefix On

# Color the common prefix in menu-complete
set menu-complete-display-prefix On

# When set to On, readline will configure the terminal that will enable it to
# insert each paste as a single string of characters, instead of treating each
# character as if it had been read from the keyboard.  This can
# prevent pasted characters from being interpreted as editing commands.
set enable-bracketed-paste On

# Show mode in prompt! IPythons been doing this as well. Line 3209 man bash
# Apr 12, 2019: Line 3200 man bash
set blink-matching-paren

# Times out too fast at 500
set keyseq-timeout 1000

# words which have more than one possible completion without any possible
# partial completion (the possible completions don't share a common prefix)
# cause the matches to be listed immediately instead of ringing the bell.
set show-all-if-unmodified

set expand-tilde on

set completion-ignore-case on

# From /usr/share/readline/inputrc example: {{{2
set bell-style none

# should we? default off. my arrow keys work idk
# not the arrow keys the application keypad too. do it
set enable-keypad on

# 8 bit clean
set input-meta on
set output-meta on

# YO! don't do this we don't need fucking umlauts i need teh ALT key
# set convert-meta off

set mark-symlinked-directories on

set skip-completed-text on

# History Search: {{{1

set history-preserve-point on

set mark-modified-lines on
# https://ss64.com/bash/bind.html
# Setup the shell to perform a history search when the Up and Down arrow keys are used.
# This allows typing part of a command and then using the arrows to select
# matching commands from history.
# (by default Up and Down will just select previous commands without any
# matching against history.)

"\e[A":history-search-backward
"\e[B":history-search-forward
"\e[C": forward-char
"\e[D": backward-char

# The last two bindings ensure that the left and right keys continue to work correctly.

# isn't working
set history-size 10000

# what are these? from bind -v
# set completion-display-width -1
# set completion-prefix-display-length 0

# Include: {{{1
# $include  /etc/inputrc

# Bindings: {{{1

# some defaults / modifications for the emacs mode
# $if mode=emacs
# jk do it no matter what these are useful

# allow the use of the Home/End keys
"\e[1~": beginning-of-line
"\e[4~": end-of-line

# allow the use of the Delete/Insert keys
"\e[3~": delete-char
"\e[2~": quoted-insert

# mappings for "page up" and "page down" to step to the beginning/end
# of the history
"\e[5~": beginning-of-history
"\e[6~": end-of-history

# alternate mappings for "page up" and "page down" to search the history
# i think ctrl up and ctrl down
# "\e[5~": history-search-backward
# "\e[6~": history-search-forward

# mappings for Ctrl-left-arrow and Ctrl-right-arrow for word moving
"\e[1;5C": forward-word
"\e[1;5D": backward-word
"\e[5C": forward-word
"\e[5D": backward-word
"\e\e[C": forward-word
"\e\e[D": backward-word

# I don't know what these escape codes mean so leave them commented out
# $if term=rxvt
# "\e[7~": beginning-of-line
# "\e[8~": end-of-line
# "\eOc": forward-word
# "\eOd": backward-word
# $endif

 # for non RH/Debian xterm, can't hurt for RH/Debian xterm
 # "\eOH": beginning-of-line
 # "\eOF": end-of-line

 # for freebsd console
 # "\e[H": beginning-of-line
 # "\e[F": end-of-line

# From /usr/share/doc/bash/inputrc.arrows
# This file controls the behaviour of line input editing for
# programs that use the Gnu Readline library.
#
# Arrow keys in keypad mode
#
# "\C-[OD"        backward-char
# "\C-[OC"        forward-char
# "\C-[OA"        previous-history
# "\C-[OB"        next-history
#
# Arrow keys in ANSI mode
#
# "\C-[[D"        backward-char
# "\C-[[C"        forward-char
# "\C-[[A"        previous-history
# "\C-[[B"        next-history
#
# Arrow keys in 8 bit keypad mode
# So we enabled keypad earlier so I'm gonna say this one
"\C-M-OD"       backward-char
"\C-M-OC"       forward-char
"\C-M-OA"       previous-history
"\C-M-OB"       next-history
#
# Arrow keys in 8 bit ANSI mode
#
# "\C-M-[D"       backward-char
# "\C-M-[C"       forward-char
# "\C-M-[A"       previous-history
# "\C-M-[B"       next-history


# From clink: {{{1

# Pleasantly surprised with these!
# Gotta figure out how to check for the conditional clink tho

# Easy. It's default installed everywhere so
$if cmd.exe

"\t":               clink-completion-shim
"C-V":                paste-from-clipboard
"C-q":                reload-lua-state
"C-z":                undo
"M-h":                show-rl-help
"M-C-c":              copy-line-to-clipboard
"C-c":                ctrl-c
"M-a":                "..\\"

"set" keymap vi-insert
"\t":               clink-completion-shim
"C-v":                paste-from-clipboard
"C-z":                undo
"M-h":                show-rl-help
"M-C-c":              copy-line-to-clipboard
"C-c":                ctrl-c
"M-a":                "..\\"
#
"set" keymap vi-move
"C-v":                paste-from-clipboard
"C-z":                undo
"M-h":                show-rl-help
"M-C-c":              copy-line-to-clipboard
"C-c":                ctrl-c
"M-a":                "..\\"
$endif

$if cmd.exe
    set keymap emacs
    "\e`U":         up-directory
    M-C-u:          up-directory
    M-C-e:          expand-env-vars

    set keymap vi-insert
    "\e`U":         up-directory
    M-C-u:          up-directory
    M-C-e:          expand-env-vars

    set keymap vi-move
    "\e`U":         up-directory
    M-C-u:          up-directory
    M-C-e:          expand-env-vars
$endif

$if Bash
    Space: magic-space
    "C-SPC": menu-complete
$endif

# Well that was fucking awesome
